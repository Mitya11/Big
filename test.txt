import pygame
import requests
import sys
import os

scale = input('Масштаб z: ')
coords = input('Координаты: ')
response = None


class Button():
    def __init__(self, rect, text):
        self.rect = pygame.Rect(rect)
        self.text = text
        self.bgcolor = pygame.Color("white")
        self.font_color = pygame.Color("black")
        # Рассчитываем размер шрифта в зависимости от высоты
        self.font = pygame.font.Font(None, self.rect.height - 4)
        self.rendered_text = None
        self.rendered_rect = None
        self.bgcolor = pygame.Color("white")
        # при создании кнопка не нажата
        self.pressed = False

    def render(self, surface):
        surface.fill(self.bgcolor, self.rect)
        self.rendered_text = self.font.render(self.text, 1, self.font_color)
        if not self.pressed:
            color1 = pygame.Color("white")
            color2 = pygame.Color("black")
            self.rendered_rect = self.rendered_text.get_rect(x=self.rect.x + 5, centery=self.rect.centery)
        else:
            color1 = pygame.Color("black")
            color2 = pygame.Color("white")
            self.rendered_rect = self.rendered_text.get_rect(x=self.rect.x + 7, centery=self.rect.centery + 2)

        # рисуем границу
        pygame.draw.rect(surface, color1, self.rect, 2)
        pygame.draw.line(surface, color2, (self.rect.right - 1, self.rect.top), (self.rect.right - 1, self.rect.bottom),
                         2)
        pygame.draw.line(surface, color2, (self.rect.left, self.rect.bottom - 1),
                         (self.rect.right, self.rect.bottom - 1), 2)
        # выводим текст
        surface.blit(self.rendered_text, self.rendered_rect)

    def get_event(self, event):
        global maper
        global proms
        global postal_bool
        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1 and self.rect.collidepoint(event.pos):
            self.pressed = self.rect.collidepoint(event.pos)
            if self.text == 'Переключатель карты':
                if maper == 'map':
                    maper = 'sat'
                elif maper == 'sat':
                    maper = 'map'
            elif self.text == 'Удалить метку':
                proms = True
                lab.address('')
            elif self.text == 'Убрать почтовый индекс':
                self.text = 'Вернуть почтовый индекс'
                postal_bool = False
                lab.address(lab.text)
            elif self.text == 'Вернуть почтовый индекс':
                self.text = 'Убрать почтовый индекс'
                lab.address(lab.text, lab.postal_code_save)
                postal_bool = True
            draw(coords, scale, maper, proms)
            screen.fill((0, 0, 0))
            screen.blit(pygame.image.load(map_file), (0, 0))


class TextBox():
    def __init__(self, rect, text):
        self.rect = pygame.Rect(rect)
        self.text = text
        self.bgcolor = pygame.Color("white")
        self.font_color = pygame.Color("black")
        # Рассчитываем размер шрифта в зависимости от высоты
        self.font = pygame.font.Font(None, self.rect.height - 4)
        self.rendered_text = None
        self.rendered_rect = None
        self.bgcolor = pygame.Color("white")
        self.active = True
        self.blink = True
        self.blink_timer = 0

    def get_event(self, event, click=False, dol=None, shir=None):
        global coords
        global promcoords
        global proms
        if event.type == pygame.KEYDOWN and self.active:
            if event.key in (pygame.K_RETURN, pygame.K_KP_ENTER):

                proms = False
                toponym_to_find = self.text

                geocoder_api_server = "http://geocode-maps.yandex.ru/1.x/"

                geocoder_params = {"geocode": toponym_to_find, "format": "json"}
                response = requests.get(geocoder_api_server, params=geocoder_params)
                json_response = response.json()
                toponym = json_response["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]
                toponym_coodrinates = toponym["Point"]["pos"]
                try:
                    postal_code = json_response["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"][
                        'metaDataProperty']['GeocoderMetaData']['AddressDetails']['Country']['AdministrativeArea'][
                        'Locality']['Thoroughfare']['Premise']['PostalCode']['PostalCodeNumber']
                except:
                    postal_code = ''
                if postal_bool:
                    lab.address(toponym_to_find, postal_code)
                else:
                    lab.address(toponym_to_find, '')
                toponym_longitude, toponym_lattitude = toponym_coodrinates.split(" ")
                coords = toponym_longitude + "," + toponym_lattitude
                promcoords = toponym_longitude + "," + toponym_lattitude
                draw(coords, scale, maper, proms)
                screen.fill((0, 0, 0))
                screen.blit(pygame.image.load(map_file), (0, 0))

            elif event.key == pygame.K_BACKSPACE:
                if len(self.text) > 0:
                    self.text = self.text[:-1]
            else:
                self.text += event.unicode
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            self.active = self.rect.collidepoint(event.pos)
        if click:
            proms = False
            toponym_to_find = str(dol) + ' ' + str(shir)

            geocoder_api_server = "http://geocode-maps.yandex.ru/1.x/"

            geocoder_params = {"geocode": toponym_to_find, "format": "json"}
            response = requests.get(geocoder_api_server, params=geocoder_params)
            json_response = response.json()
            toponym = json_response["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]
            toponym_coodrinates = toponym['metaDataProperty']['GeocoderMetaData']['text']
            try:
                postal_code = \
                json_response["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]['metaDataProperty'][
                    'GeocoderMetaData']['AddressDetails']['Country']['AdministrativeArea']['Locality']['Thoroughfare'][
                    'Premise']['PostalCode']['PostalCodeNumber']
            except:
                postal_code = ''
            if postal_bool:
                lab.address(toponym_coodrinates, postal_code)
            else:
                lab.address(toponym_coodrinates, '')
            toponym_longitude, toponym_lattitude = toponym_to_find.split(" ")
            promcoords = toponym_longitude + "," + toponym_lattitude
            draw(coords, scale, maper, proms)
            screen.fill((0, 0, 0))
            screen.blit(pygame.image.load(map_file), (0, 0))

    def update(self):
        if pygame.time.get_ticks() - self.blink_timer > 200:
            self.blink = not self.blink
            self.blink_timer = pygame.time.get_ticks()

    def render(self, surface):
        surface.fill(self.bgcolor, self.rect)
        self.rendered_text = self.font.render(self.text, 1, self.font_color)
        self.rendered_rect = self.rendered_text.get_rect(x=self.rect.x + 2, centery=self.rect.centery)
        # выводим текст
        surface.blit(self.rendered_text, self.rendered_rect)
        if self.blink and self.active:
            pygame.draw.line(surface, pygame.Color("black"),
                             (self.rendered_rect.right + 2, self.rendered_rect.top + 2),
                             (self.rendered_rect.right + 2, self.rendered_rect.bottom - 2))


class Label:
    def __init__(self, rect, text):
        self.rect = pygame.Rect(rect)
        self.text = text
        self.postal_code = ''
        self.postal_code_save = ''
        self.bgcolor = pygame.Color("white")
        self.font_color = pygame.Color("gray")
        # Рассчитываем размер шрифта в зависимости от высоты
        self.font = pygame.font.Font(None, self.rect.height - 4)
        self.rendered_text = None
        self.rendered_rect = None

    def render(self, surface):
        surface.fill(self.bgcolor, self.rect)
        self.rendered_text = self.font.render(self.text + ' : ' + self.postal_code, 1, self.font_color)
        self.rendered_rect = self.rendered_text.get_rect(x=self.rect.x + 2, centery=self.rect.centery)
        # выводим текст
        surface.blit(self.rendered_text, self.rendered_rect)

    def address(self, text, postal_code=''):
        self.text = text
        self.postal_code = postal_code
        if postal_code != '':
            self.postal_code_save = postal_code


proms = False
promcoords = coords
postal_bool = True


def draw(coords, scale, maper, proms):
    try:
        if proms:
            map_request = "https://static-maps.yandex.ru/1.x/?ll=" + coords + "&l=" + maper + "&z=" + scale
        else:
            map_request = "https://static-maps.yandex.ru/1.x/?ll=" + coords + "&l=" + maper + "&z=" + scale + "&pt=" + promcoords + ',pm2dgl'
        response = requests.get(map_request)
    except:
        sys.exit(1)
    map_file = "map.png"
    try:
        with open(map_file, "wb") as file:
            file.write(response.content)
    except IOError as ex:
        print("Ошибка записи временного файла:", ex)
        sys.exit(2)


def organ_search(coords):
    search_api_server = "https://search-maps.yandex.ru/v1/"
    api_key = "3c4a592e-c4c0-4949-85d1-97291c87825c"

    address_ll = coords

    search_params = {
        "apikey": api_key,
        "spn": '0.000045,0.000045',
        "lang": "ru_RU",
        "ll": address_ll,
        "type": "biz",
        "rspn": '0'
    }

    response = requests.get(search_api_server, params=search_params)
    if not response:
        pass

    json_response = response.json()
    try:
        org_name = json_response['features'][0]['properties']['CompanyMetaData']['name']
        print(org_name)
    except:
        pass


maper = 'map'
draw(coords, scale, maper, proms)
map_file = "map.png"
# Инициализируем pygame
pygame.init()
screen = pygame.display.set_mode((600, 450))
# Рисуем картинку, загружаемую из только что созданного файла.
screen.blit(pygame.image.load(map_file), (0, 0))
# Переключаем экран и ждем закрытия окна.
but = Button((10, 25, 140, 20), "Переключатель карты")
but1 = Button((10, 65, 140, 20), "Удалить метку")
but2 = Button((10, 105, 140, 20), "Убрать почтовый индекс")
lab = Label((10, 85, 200, 20), "")
texted = TextBox((10, 45, 140, 20), "")
pygame.display.flip()
running = True

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == 280:
                scale = str(int(scale) + 1)
                draw(coords, scale, maper, proms)
                screen.fill((0, 0, 0))
                screen.blit(pygame.image.load(map_file), (0, 0))
            elif event.key == 281:
                scale = str(int(scale) - 1)
                draw(coords, scale, maper, proms)
                screen.fill((0, 0, 0))
                screen.blit(pygame.image.load(map_file), (0, 0))
            elif event.key == 275:
                a = coords.split(',')
                a[0] = str(float(a[0]) + 1 / int(scale))
                coords = ','.join(a)
                draw(coords, scale, maper, proms)
                screen.fill((0, 0, 0))
                screen.blit(pygame.image.load(map_file), (0, 0))
            elif event.key == 276:
                a = coords.split(',')
                a[0] = str(float(a[0]) - 1 / int(scale))
                coords = ','.join(a)
                draw(coords, scale, maper, proms)
                screen.fill((0, 0, 0))
                screen.blit(pygame.image.load(map_file), (0, 0))
            elif event.key == 273:
                a = coords.split(',')
                a[1] = str(float(a[1]) + 1 / int(scale))
                coords = ','.join(a)
                draw(coords, scale, maper, proms)
                screen.fill((0, 0, 0))
                screen.blit(pygame.image.load(map_file), (0, 0))
            elif event.key == 274:
                a = coords.split(',')
                a[1] = str(float(a[1]) - 1 / int(scale))
                coords = ','.join(a)
                draw(coords, scale, maper, proms)
                screen.fill((0, 0, 0))
                screen.blit(pygame.image.load(map_file), (0, 0))
        elif event.type == pygame.MOUSEBUTTONDOWN and not but.rect.collidepoint(
                event.pos) and not but1.rect.collidepoint(event.pos) and not but2.rect.collidepoint(
                event.pos) and not texted.rect.collidepoint(event.pos):
            if event.button == 1:
                dol = (360 / 2 ** (int(scale) - 1)) / 600
                shir = (128 / 2 ** (int(scale) - 1)) / 450 * 2
                cor = coords.split(',')
                ret_dol = dol * (event.pos[0] - 300) + float(cor[0])
                ret_shir = -(shir * (event.pos[1] - 225)) + float(cor[1])
                if ret_shir >= 90:
                    ret_shir -= 25
                texted.get_event(event, True, ret_dol, ret_shir)
            elif event.button == 3:
                dol = (360 / 2 ** (int(scale) - 1)) / 600
                shir = (128 / 2 ** (int(scale) - 1)) / 450 * 2
                cor = coords.split(',')
                ret_dol = dol * (event.pos[0] - 300) + float(cor[0])
                ret_shir = -(shir * (event.pos[1] - 225)) + float(cor[1])
                if ret_shir >= 90:
                    ret_shir -= 25
                organ_search(str(ret_dol) + ',' + str(ret_shir))
        but.get_event(event)
        but1.get_event(event)
        texted.get_event(event)
        but2.get_event(event)
    pygame.display.flip()
    but.render(screen)
    but1.render(screen)
    but2.render(screen)
    lab.render(screen)
    texted.update()
    texted.render(screen)
pygame.quit()

# Удаляем за собой файл с изображением.
os.remove(map_file)
